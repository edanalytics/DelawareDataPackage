.libPaths()
find_rtools()
find_rtools()
.libPaths()
??find_rtools()
install.packages("devtools")
install.packages("devtools")
find_rtools()
devtools::create("DelawareTrainingData")
devtools::create("DelawareTrainingData")
devtools::use_package("data.table")
devtools::use_data("N:/general/archived_code/training/sample_data/deid_test_multi_row.csv")
deid <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
View(deid)
deid_dems_single_row_per_student <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
deid_dems_single_row_per_student_with_grade <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student_with_grade.csv")
deid_dems_single_row_per_year <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_year.csv")
deid_test_multi_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_multi_row.csv")
deid_test_single_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_single_row.csv")
View(deid_test_multi_row)
deid_dems_single_row_per_student <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
save(deid_dems_single_row_per_student, file = "data/deid_dems_single_row_per_student.rdata")
deid_dems_single_row_per_student_with_grade <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student_with_grade.csv")
save(deid_dems_single_row_per_student_with_grade, file = "data/deid_dems_single_row_per_student_with_grade.rdata")
deid_dems_single_row_per_year <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_year.csv")
save(deid_dems_single_row_per_year, file = "data/deid_dems_single_row_per_year.rdata")
deid_test_multi_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_multi_row.csv")
save(deid_test_multi_row, file = "data/deid_test_multi_row.rdata")
deid_test_single_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_single_row.csv")
save(deid_test_single_row, file = "data/deid_test_single_row.rdata")
deid_dems_single_row_per_student <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
save(deid_dems_single_row_per_student, file = "data/deid_dems_single_row_per_student.rdata")
deid_dems_single_row_per_student <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
save(deid_dems_single_row_per_student, file = "data/deid_dems_single_row_per_student.rdata")
deid_dems_single_row_per_student_with_grade <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student_with_grade.csv")
save(deid_dems_single_row_per_student_with_grade, file = "data/deid_dems_single_row_per_student_with_grade.rdata")
deid_dems_single_row_per_year <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_year.csv")
save(deid_dems_single_row_per_year, file = "data/deid_dems_single_row_per_year.rdata")
deid_test_multi_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_multi_row.csv")
save(deid_test_multi_row, file = "data/deid_test_multi_row.rdata")
deid_test_single_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_single_row.csv")
save(deid_test_single_row, file = "data/deid_test_single_row.rdata")
View(deid_dems_single_row_per_student)
devtools::document()
?deid_dems_single_row_per_student
devtools::document()
?deid_dems_single_row_per_student
install.packages("DelawareTrainingData")
find_rtools()
find_rtools()
install.packages("Rtools")
find_rtools()
?find_rtools
??find_rtools
library(devtools)
find_rtools()
library(DelawareTrainingData)
?deid_dems_single_row_per_student
data("deid_dems_single_row_per_year")
data(deid_dems_single_row_per_year)
?data
data(deid_dems_single_row_per_student, package = "DelawareTrainingData")
load("P:/GitHub/training/DelawareTrainingData/data/deid_dems_single_row_per_student.rdata")
View(deid_dems_single_row_per_student)
load(deid_dems_single_row_per_student)
load("deid_dems_single_row_per_student")
?deid_dems_single_row_per_student
deid_dems_single_row_per_student_with_grade <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student_with_grade.csv")
View(deid_dems_single_row_per_student_with_grade)
devtools::document()
?deid_dems_single_row_per_student_with_grade
deid_dems_single_row_per_year <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_year.csv")
View(deid_dems_single_row_per_year)
names(deid_dems_single_row_per_year)
deid_test_multi_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_multi_row.csv")
names(deid_test_multi_row)
View(deid_test_multi_row)
deid_test_single_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_single_row.csv")
identical(names(deid_test_multi_row),names(deid_test_single_row))
View(deid_test_single_row)
devtools::document()
library(DelawareTrainingData)
install.packages("Rtools")
library(Rtools)
install.packages(Rtools)
install.packages("Rtools")
library(Rtools)
install.packages("rtools")
install.packages("Rtools")
install.packages("Rtools*.exe")
install.packages("Rtools.exe")
install.packages("Rtools*")
?deid_dems_single_row_per_year
rm(list=ls())
####################################################
# Create answer keys for "Do it yourself" sections #
####################################################
#########################################
# Create answer data set for 2_subset.r #
#########################################
# load the data.table package
library(data.table)
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load the raw test data csv and make it a data table
raw_test_data 	<- fread(paste0(sample_data_dir,"/deid_test_multi_row.csv"),stringsAsFactors=FALSE)
# view the data
## this is fake student-level data
# View(raw_test_data)
# subset to only 2011 and 2014 data and just 4 columns
answer_2subset <- subset(raw_test_data, school_year %in% c(2011,2014),select = c(school_year,fake_student_id,test_grade,test_scale_score))
########################################
# Create answer data set for 3_merge.r #
########################################
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load raw data, save as data.tables
raw_test_data 				  <- fread(paste0(sample_data_dir,"deid_test_multi_row.csv"),colClasses="character")
raw_student_dems		  	<- fread(paste0(sample_data_dir,"deid_dems_single_row_per_year.csv"),
colClasses="character")
## create a dataset that brings together students' test data for students who have a
## test_scale_score greater than or equal to 693 with thier demographic information
## only include the students who's race_descr is "Black"
test_subset <- subset(raw_test_data, subset = as.numeric(test_scale_score) >= 693,)
dems_subset <- subset(raw_student_dems, subset = race_descr == "Black")
setkey(test_subset, school_year, fake_student_id)
setkey(dems_subset, school_year, fake_student_id)
answer_3merge <- merge(test_subset, dems_subset, by = c("fake_student_id", "school_year"))
#########################################
# Create answer data set for 4_recode.r #
#########################################
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load raw student demographic data
raw_student_dems	<- fread(paste0(sample_data_dir,"deid_dems_single_row_per_student_with_grade.csv"),
stringsAsFactors=FALSE)
## create a new column in raw_student_dems for a bianary coding of gender, "0" for male and "1" for female
## call the column "bi_gender". then, make another new column called "lower_upper" with entries of either
## "lower" for students in grades 3-6 or "upper" for students in grades 7-11
#create a copy of the data to work with
answer_4recode <- copy(raw_student_dems)
# create bi_gender
answer_4recode[gender=="F", bi_gender := "1"]
answer_4recode[gender=="M", bi_gender := "0"]
#create lower_upper
answer_4recode[grade %in% c(3:6), lower_upper := "lower"]
answer_4recode[grade %in% c(7:11), lower_upper := "upper"]
#############################################
# Create answer data set for 5_operations.r #
#############################################
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load the raw test data csv and make it a data table
raw_test_data 	<- fread(paste0(sample_data_dir,"/deid_test_multi_row.csv"),colClasses="character")
## use the space bellow to subset the raw_test_data to test_period 1. then, create a new column, "arbitrary_math"
## by dividing each "test_raw_score" by the sum of the column "test_performance_level" and then
## subtract "test_scale_score".
answer_5operations <- subset(raw_test_data, test_period == "1",)
answer_5operations[,test_raw_score:=as.numeric(test_raw_score)]
answer_5operations[,test_performance_level:=as.numeric(test_performance_level)]
answer_5operations[,test_scale_score:=as.numeric(test_scale_score)]
answer_5operations[,arbitrary_math := (test_raw_score/sum(test_performance_level)) - test_scale_score]
#############################################
# Create answer data set for 6_by_group.r #
#############################################
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load the raw test data csv and make it a data table
raw_test_data 	<- fread(paste0(sample_data_dir,"/deid_test_multi_row.csv"),colClasses="character")
## first, create a table of the mean "test_performance_level" by "school_year". name the table "avg_performance"
## and name the column of means "avg_perform".
avg_performance = raw_test_data[,list(avg_perform = mean(as.numeric(test_performance_level))), by=school_year]
## create a frequency table of the number of entries by "school_year", "test_period", and "test_performance_level"
## call the table "count_entries" and call the new frequency column "count".
count_entries = raw_test_data[,list(count = length(test_performance_level)),
by=list(school_year, test_period, test_performance_level)]
## merge the two tables together, remember that this is a many to one merge
setkey(avg_performance, school_year)
setkey(count_entries, school_year)
answer_6bygroup = merge(avg_performance,count_entries, by = "school_year")
#############################################
# Create answer data set for 7_transpose.r #
#############################################
# load data table package
library(data.table)
# load plyr package
library(plyr)
# load reshape package
library(reshape2)
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load the raw test data csv and make it a data table
raw_test_data 	<- fread(paste0(sample_data_dir,"/deid_test_multi_row.csv"),stringsAsFactors=FALSE)
## use the space bellow and the "raw_test_data" set to do the following:
## first, make the "raw_test_data" "go wide," the values should be "test_performance_level"
## and the variable should be "school_year" and "test_grade."
first_step <- data.table(dcast(data = raw_test_data,
formula = fake_student_id+test_name+opportunity_number+test_period+test_content_area
~ school_year+test_grade,
value.var = "test_performance_level"))
## then, take the wide set you've just created, and make it "go long." The variable name
## should be "year_test_grade" and the value name should be "test_performance_level".
## call this new, long dataset "myanswer".
answer_7transpose <- melt(first_step,
id=c("fake_student_id","test_name","opportunity_number","test_period","test_content_area"),
na.rm=TRUE,
variable.name = "year_test_grade",
value.name = "test_performance_level")
#######################################
# Create answer data set for 9_loop.r #
#######################################
# set directory of sample data
sample_data_dir <- "N:/general/archived_code/training/sample_data/"
# load the raw test data csv and make it a data table
raw_test_data 	<- fread(paste0(sample_data_dir,"/deid_test_multi_row.csv"),stringsAsFactors=FALSE)
## use the space bellow and the "raw_test_data" set to do the following:
## create a subset of the raw_test_data of only entries from schools 103 and 70 and call it "subset"
subset = subset(raw_test_data,fake_school_id == "103" | fake_school_id == "70")
## for each entry in subset, print the "test_start_date" and, if the "test_content_area" is "ELA",
## add the "test_scale_score" to a variable named "total_test_scale_score_ELA"
total_test_scale_score_ELA = 0
for(i in 1:nrow(subset)){
print(subset$test_start_date[i])
if(subset$test_content_area[i]=="ELA"){
total_test_scale_score_ELA <- total_test_scale_score_ELA + subset$test_scale_score[i]
}
}
answer_9loop = total_test_scale_score_ELA
###################################
# Create answers for 10_ggplot2.r #
###################################
# set file location of example data (forward slashes only)
in_file_location <- "N:/delaware_training/module_powerpoints/sample_test_data_ggplot2.csv"
# load example data and store it as a data.table
in_data <- data.table(read.csv(in_file_location,colClasses="character"))
# convert numeric values to numbers for plots
in_data[ , math_scale_score_2013:=as.numeric(math_scale_score_2013)]
in_data[ , read_scale_score_2013:=as.numeric(read_scale_score_2013)]
# 1a. create a histogram of reading scale scores using "in_data"
hist_data <- ggplot(data = in_data, aes(x = read_scale_score_2013))
hist_data+geom_histogram()
# 1b. facet the histogram, grouped by economic disadvantage status
hist_data+geom_histogram()+ facet_wrap(~ d_econdisadv_y)
# 2a. create a boxplot of the reading test score distribution  using geom_boxplot()
box_data <- ggplot(data = in_data, aes(x=as.factor(0), y = read_scale_score_2013))
box_data + geom_boxplot(stat = "boxplot",position = "dodge")
# 2b. facet the previous boxplot by tested_grade
box_data <- ggplot(data = in_data, aes(x=as.factor(tested_grade), y = read_scale_score_2013))
box_data + geom_boxplot(stat = "boxplot",position = "dodge")
# 3a. create a density plot of reading scores using geom_density()
dens_data <- ggplot(data = in_data, aes(x=read_scale_score_2013))
dens_data + geom_density()
# 3b. add math scores density line to the plot, and then adjust legend (first melt data by uncommenting the lines)
melted_data <- reshape2::melt(in_data, "student_id",
c("math_scale_score_2013", "read_scale_score_2013"), variable.name="subject", value.name = "scale_score")
dens_data2 <-ggplot(data = melted_data, aes(x=scale_score, color = subject))
dens_data2 + geom_density(alpha=0.25)
###################################################
# output the file to be used in the training code #
###################################################
save(file = "P:/GitHub/Delaware_Data_Package/data_raw/answers_doit_yourself.Rdata", answer_2subset,answer_3merge,
answer_4recode, answer_5operations, answer_6bygroup,answer_7transpose,answer_9loop)
library(ggplot2)
in_file_location <- "N:/delaware_training/module_powerpoints/sample_test_data_ggplot2.csv"
# load example data and store it as a data.table
in_data <- data.table(read.csv(in_file_location,colClasses="character"))
# convert numeric values to numbers for plots
in_data[ , math_scale_score_2013:=as.numeric(math_scale_score_2013)]
in_data[ , read_scale_score_2013:=as.numeric(read_scale_score_2013)]
# 1a. create a histogram of reading scale scores using "in_data"
hist_data <- ggplot(data = in_data, aes(x = read_scale_score_2013))
hist_data+geom_histogram()
# 1b. facet the histogram, grouped by economic disadvantage status
hist_data+geom_histogram()+ facet_wrap(~ d_econdisadv_y)
# 2a. create a boxplot of the reading test score distribution  using geom_boxplot()
box_data <- ggplot(data = in_data, aes(x=as.factor(0), y = read_scale_score_2013))
box_data + geom_boxplot(stat = "boxplot",position = "dodge")
# 2b. facet the previous boxplot by tested_grade
box_data <- ggplot(data = in_data, aes(x=as.factor(tested_grade), y = read_scale_score_2013))
box_data + geom_boxplot(stat = "boxplot",position = "dodge")
# 3a. create a density plot of reading scores using geom_density()
dens_data <- ggplot(data = in_data, aes(x=read_scale_score_2013))
dens_data + geom_density()
# 3b. add math scores density line to the plot, and then adjust legend (first melt data by uncommenting the lines)
melted_data <- reshape2::melt(in_data, "student_id",
c("math_scale_score_2013", "read_scale_score_2013"), variable.name="subject", value.name = "scale_score")
dens_data2 <-ggplot(data = melted_data, aes(x=scale_score, color = subject))
dens_data2 + geom_density(alpha=0.25)
save(file = "P:/GitHub/Delaware_Data_Package/data/answers_doit_yourself.Rdata", answer_2subset,answer_3merge,
answer_4recode, answer_5operations, answer_6bygroup,answer_7transpose,answer_9loop)
dems_single_row_student <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student.csv")
save(dems_single_row_student, file = "data/dems_single_row_student.rdata")
dems_single_row_student_wgrade <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_student_with_grade.csv")
save(dems_single_row_student_wgrade, file = "data/dems_single_row_student_wgrade.rdata")
dems_single_row_year <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_dems_single_row_per_year.csv")
save(dems_single_row_year, file = "data/dems_single_row_year.rdata")
test_multi_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_multi_row.csv")
save(test_multi_row, file = "data/test_multi_row.rdata")
test_single_row <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/deid_test_single_row.csv")
save(deid_test_single_row, file = "data/test_single_row.rdata")
data_ggplot2 <- read.csv("P:/GitHub/training/DelawareTrainingData/data_raw/sample_test_data_ggplot2.csv")
save(data_ggplot2, file = "data/data_ggplot2.rdata")
dems_single_row_student <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_student.csv")
save(dems_single_row_student, file = "data/dems_single_row_student.rdata")
dems_single_row_student_wgrade <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_student_with_grade.csv")
save(dems_single_row_student_wgrade, file = "data/dems_single_row_student_wgrade.rdata")
dems_single_row_year <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_year.csv")
save(dems_single_row_year, file = "data/dems_single_row_year.rdata")
test_multi_row <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_test_multi_row.csv")
save(test_multi_row, file = "data/test_multi_row.rdata")
test_single_row <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_test_single_row.csv")
save(deid_test_single_row, file = "data/test_single_row.rdata")
data_ggplot2 <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/sample_test_data_ggplot2.csv")
save(data_ggplot2, file = "data/data_ggplot2.rdata")
dems_single_row_student <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_student.csv")
save(dems_single_row_student, file = "data/dems_single_row_student.rdata")
dems_single_row_student_wgrade <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_student_with_grade.csv")
save(dems_single_row_student_wgrade, file = "data/dems_single_row_student_wgrade.rdata")
dems_single_row_year <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_dems_single_row_per_year.csv")
save(dems_single_row_year, file = "data/dems_single_row_year.rdata")
test_multi_row <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_test_multi_row.csv")
save(test_multi_row, file = "data/test_multi_row.rdata")
test_single_row <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_test_single_row.csv")
save(deid_test_single_row, file = "data/test_single_row.rdata")
test_single_row <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/deid_test_single_row.csv")
save(test_single_row, file = "data/test_single_row.rdata")
data_ggplot2 <- read.csv("P:/GitHub/Delaware_Data_Package/data_raw/sample_test_data_ggplot2.csv")
save(data_ggplot2, file = "data/data_ggplot2.rdata")
View(data_ggplot2)
